-- Aggiornamenti al database per mantenere i dati esistenti
-- Eseguire questi comandi in ordine per aggiungere le nuove funzionalit√†

USE manga_collection;

-- 1. Aggiungere colonna prezzo per le serie manga (per le serie mancanti)
ALTER TABLE serie_manga 
ADD COLUMN prezzo_medio DECIMAL(10,2) DEFAULT 0.00;

-- 2. Creare tabella per i volumi individuali posseduti
CREATE TABLE IF NOT EXISTS volumi_posseduti (
    id INT PRIMARY KEY AUTO_INCREMENT,
    serie_id INT NOT NULL,
    numero_volume INT NOT NULL,
    posseduto BOOLEAN DEFAULT TRUE,
    data_acquisto DATE NULL,
    prezzo_pagato DECIMAL(10,2) DEFAULT 0.00,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (serie_id) REFERENCES serie_manga(id) ON DELETE CASCADE,
    UNIQUE KEY unique_volume (serie_id, numero_volume)
);

-- 3. Popolare la tabella volumi_posseduti con i dati esistenti
-- Questo script mantiene i dati attuali e crea i record dei volumi posseduti
INSERT INTO volumi_posseduti (serie_id, numero_volume, posseduto)
SELECT 
    sm.id as serie_id,
    numbers.n as numero_volume,
    CASE WHEN numbers.n <= sm.volumi_posseduti THEN TRUE ELSE FALSE END as posseduto
FROM serie_manga sm
JOIN (
    SELECT 1 as n UNION SELECT 2 UNION SELECT 3 UNION SELECT 4 UNION SELECT 5 UNION
    SELECT 6 UNION SELECT 7 UNION SELECT 8 UNION SELECT 9 UNION SELECT 10 UNION
    SELECT 11 UNION SELECT 12 UNION SELECT 13 UNION SELECT 14 UNION SELECT 15 UNION
    SELECT 16 UNION SELECT 17 UNION SELECT 18 UNION SELECT 19 UNION SELECT 20 UNION
    SELECT 21 UNION SELECT 22 UNION SELECT 23 UNION SELECT 24 UNION SELECT 25 UNION
    SELECT 26 UNION SELECT 27 UNION SELECT 28 UNION SELECT 29 UNION SELECT 30 UNION
    SELECT 31 UNION SELECT 32 UNION SELECT 33 UNION SELECT 34 UNION SELECT 35 UNION
    SELECT 36 UNION SELECT 37 UNION SELECT 38 UNION SELECT 39 UNION SELECT 40 UNION
    SELECT 41 UNION SELECT 42 UNION SELECT 43 UNION SELECT 44 UNION SELECT 45 UNION
    SELECT 46 UNION SELECT 47 UNION SELECT 48 UNION SELECT 49 UNION SELECT 50 UNION 
	 SELECT 51 UNION SELECT 52 UNION SELECT 53 UNION SELECT 54 UNION SELECT 55 UNION 
	 SELECT 56 UNION SELECT 57 UNION SELECT 58 UNION SELECT 59 UNION SELECT 60 UNION 
	 SELECT 61 UNION SELECT 62 UNION SELECT 63 UNION SELECT 64 UNION SELECT 65 UNION 
	 SELECT 66 UNION SELECT 67 UNION SELECT 68 UNION SELECT 69 UNION SELECT 70 UNION 
	 SELECT 71 UNION SELECT 72 UNION SELECT 73 UNION SELECT 74 UNION SELECT 75 UNION 
	 SELECT 76 UNION SELECT 77 UNION SELECT 78 UNION SELECT 79 UNION SELECT 80 UNION 
	 SELECT 81 UNION SELECT 82 UNION SELECT 83 UNION SELECT 84 UNION SELECT 85 UNION 
	 SELECT 86 UNION SELECT 87 UNION SELECT 88 UNION SELECT 89 UNION SELECT 90 UNION 
	 SELECT 91 UNION SELECT 92 UNION SELECT 93 UNION SELECT 94 UNION SELECT 95 UNION 
	 SELECT 96 UNION SELECT 97 UNION SELECT 98 UNION SELECT 99 UNION SELECT 100 UNION 
	 SELECT 101 UNION SELECT 102 UNION SELECT 103 UNION SELECT 104 UNION SELECT 105 UNION
	 SELECT 106 UNION SELECT 107 UNION SELECT 108 UNION SELECT 109 UNION SELECT 110 UNION
	 SELECT 111 UNION SELECT 112 UNION SELECT 113 UNION SELECT 114 UNION SELECT 115 UNION
	 SELECT 116 UNION SELECT 117 UNION SELECT 118 UNION SELECT 119 UNION SELECT 120 UNION
	 SELECT 121 UNION SELECT 122 UNION SELECT 123 UNION SELECT 124 UNION SELECT 125 UNION
	 SELECT 126 UNION SELECT 127 UNION SELECT 128 UNION SELECT 129 UNION SELECT 130 UNION
	 SELECT 131 UNION SELECT 132 UNION SELECT 133 UNION SELECT 134 UNION SELECT 135 UNION
	 SELECT 136 UNION SELECT 137 UNION SELECT 138 UNION SELECT 139 UNION SELECT 140 UNION
	 SELECT 141 UNION SELECT 142 UNION SELECT 143 UNION SELECT 144 UNION SELECT 145 UNION
	 SELECT 146 UNION SELECT 147 UNION SELECT 148 UNION SELECT 149 UNION SELECT 150


) numbers ON numbers.n <= sm.volumi_totali
WHERE sm.volumi_totali > 0;

-- 4. Aggiungere indici per migliorare le performance
CREATE INDEX idx_serie_prezzo ON serie_manga(prezzo_medio);
CREATE INDEX idx_serie_titolo ON serie_manga(titolo);
CREATE INDEX idx_variant_prezzo ON variant_manga(costo_medio);
CREATE INDEX idx_variant_titolo ON variant_manga(titolo);
CREATE INDEX idx_volumi_serie ON volumi_posseduti(serie_id);

-- 5. Vista per calcolare automaticamente i volumi posseduti
CREATE OR REPLACE VIEW serie_manga_with_counts AS
SELECT 
    sm.*,
    COALESCE(vp.volumi_posseduti_count, 0) as volumi_posseduti_calculated
FROM serie_manga sm
LEFT JOIN (
    SELECT 
        serie_id,
        COUNT(*) as volumi_posseduti_count
    FROM volumi_posseduti 
    WHERE posseduto = TRUE 
    GROUP BY serie_id
) vp ON sm.id = vp.serie_id;